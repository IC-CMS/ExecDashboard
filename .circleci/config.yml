# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:

  packagejs:
    docker:
      # specify the version you desire here
      - image: circleci/node

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          command: |
            cd exec-ui
            npm install
      - run: mkdir -p /tmp/workspace/ && cp -r exec-ui /tmp/workspace/exec-ui && cp exec-ui/Dockerfile /tmp/workspace/exec-ui/

      - persist_to_workspace:
          root: /tmp/workspace/
          paths:
            - ./*
            - ./Dockerfile
      - run: pwd
      - run: ls -al
      - run: ls -al exec-ui
  package:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      MAVEN_OPTS: -Xmx3200m 

    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: mvn -s .circleci/.circleci.settings.xml package -DskipTests
      #Why save the cache twice?  In case the mvn test didn't pull everything correctly, we have a second go.
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - run: mkdir -p /tmp/workspace/
      - run: cp -r exec-analysis /tmp/workspace/exec-analysis && cp exec-analysis/Dockerfile /tmp/workspace/exec-analysis
      - run: cp -r exec-api /tmp/workspace/exec-api && cp exec-api/Dockerfile /tmp/workspace/exec-api
      - run: cp -r exec-core /tmp/workspace/exec-core && cp exec-core/Dockerfile /tmp/workspace/exec-core
      - persist_to_workspace:
          root: /tmp/workspace/
          paths:
            - ./*
            - ./*.jar
            - ./Dockerfile
  lint:
    docker:
      - image: circleci/node

    working_directory: ~/repo

    steps:
      - checkout
      - run:
          command: |
            cd exec-ui
            npm install
            npm run lint
  test:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m 
    steps:
      - checkout    
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: mvn -s .circleci/.circleci.settings.xml clean test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit/
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
  deploy:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m 
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: VERSION_NUM=($CIRCLE_BUILD_NUM + 1) && sed -i "s/BUILDNUMBER/$VERSION_NUM/g" pom.xml
      - run: VERSION_NUM=($CIRCLE_BUILD_NUM + 1) && sed -i "s/BUILDNUMBER/$VERSION_NUM/g" exec-analysis/pom.xml
      - run: VERSION_NUM=($CIRCLE_BUILD_NUM + 1) && sed -i "s/BUILDNUMBER/$VERSION_NUM/g" exec-api/pom.xml
      - run: VERSION_NUM=($CIRCLE_BUILD_NUM + 1) && sed -i "s/BUILDNUMBER/$VERSION_NUM/g" exec-core/pom.xml
      - run: mvn -s .circleci/.circleci.settings.xml deploy -DskipTests


  deploy-node:
    docker:
      - image: circleci/node
    working_directory: ~/repo
    steps:
      - checkout
      - run: VERSION_NUM=($CIRCLE_BUILD_NUM + 1) && sed -i "s/BUILDNUMBER/$VERSION_NUM/g" exec-ui/package.json
      - run:
          name: Authenticate with Bintray
          command: curl -u$NPM_USER:$NPM_PASS https://api.bintray.com/npm/ic-cms/Node/auth > ~/.npmrc
      - run:
          name: Set the Bintray registry
          command: |
            cd exec-ui
            npm config set registry https://api.bintray.com/npm/ic-cms/Node
      - run:
          name: Publish to Bintray
          command: |
            cd exec-ui
            npm publish

  publish_exec_ui:
      machine:
        enabled: true
      working_directory: ~/repo
      steps:
        - attach_workspace:
            at: /tmp/workspace
        - run: ls -lart /tmp/workspace/
        - run: ls -al /tmp/workspace/exec-ui/
        - run: cat /tmp/workspace/exec-ui/Dockerfile
        - run: mkdir ui-target
        - run: mv /tmp/workspace/exec-ui/Dockerfile ./Dockerfile
        - run: cp -r /tmp/workspace/exec-ui/. ui-target/
        - run: ls -al ui-target
        - run: |
            TAG=1.1.$CIRCLE_BUILD_NUM
            docker build -t sredna/hygieia-exec-ui:$TAG .
            docker tag sredna/hygieia-exec-ui:$TAG sredna/hygieia-exec-ui:latest
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push sredna/hygieia-exec-ui:$TAG
            docker push sredna/hygieia-exec-ui:latest

  publish_exec_analysis:
    machine:
      enabled: true
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: ls -lart /tmp/workspace/exec-analysis/target
      - run: mkdir analysis-target && mv /tmp/workspace/exec-analysis/target/exec-analysis-*.jar analysis-target/exec-analysis.jar && mv /tmp/workspace/exec-analysis/Dockerfile ./Dockerfile
      - run: |
          TAG=1.1.$CIRCLE_BUILD_NUM
          docker build -t sredna/hygieia-exec-analysis:$TAG .
          docker tag sredna/hygieia-exec-analysis:$TAG sredna/hygieia-exec-analysis:latest
          docker login -u $DOCKER_USER -p $DOCKER_PASS
          docker push sredna/hygieia-exec-analysis:$TAG
          docker push sredna/hygieia-exec-analysis:latest
  publish_exec_core:
    machine:
      enabled: true
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: ls -lart /tmp/workspace/exec-core/target
      - run: mkdir core-target && mv /tmp/workspace/exec-core/target/exec-core-*.jar core-target/exec-core.jar && mv /tmp/workspace/exec-core/Dockerfile ./Dockerfile
      - run: |
          TAG=1.1.$CIRCLE_BUILD_NUM
          docker build -t sredna/hygieia-exec-core:$TAG .
          docker tag sredna/hygieia-exec-core:$TAG sredna/hygieia-exec-core:latest
          docker login -u $DOCKER_USER -p $DOCKER_PASS
          docker push sredna/hygieia-exec-core:$TAG
          docker push sredna/hygieia-exec-core:latest
  publish_exec_api:
    machine:
      enabled: true
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: ls -lart /tmp/workspace/exec-api/target
      - run: mkdir api-target && mv /tmp/workspace/exec-api/target/exec-api-*.jar api-target/exec-api.jar && mv /tmp/workspace/exec-api/Dockerfile ./Dockerfile
      - run: |
          TAG=1.1.$CIRCLE_BUILD_NUM
          docker build -t sredna/hygieia-exec-api:$TAG .
          docker tag sredna/hygieia-exec-api:$TAG sredna/hygieia-exec-api:latest
          docker login -u $DOCKER_USER -p $DOCKER_PASS
          docker push sredna/hygieia-exec-api:$TAG
          docker push sredna/hygieia-exec-api:latest
workflows:
  version: 2
  full_boat:
    jobs: 
      #- lint
      - test
      - packagejs:
          #requires:
            #- lint
          filters:
            branches:
              only:
                - master
      - package:
          requires:
            - test
          filters:
            branches:
              only:
                - master
      - deploy-node:
          #requires:
            #- lint
          filters:
            branches:
              only:
                - master
      - deploy:
          requires:
            - test
          filters:
            branches:
              only:
                - master
      - publish_exec_ui:
          requires:
            - packagejs
          filters:
            branches:
              only:
                - master
      - publish_exec_analysis:
          requires:
            - package
          filters:
            branches:
              only:
                - master
      - publish_exec_core:
          requires:
            - package
          filters:
            branches:
              only:
                - master
      - publish_exec_api:
          requires:
            - package
          filters:
            branches:
              only:
                - master
